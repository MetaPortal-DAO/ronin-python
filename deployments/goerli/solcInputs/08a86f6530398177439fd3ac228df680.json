{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// can import interfaces from github same as importing whole interface\n// interface import ABI allows us call this contract\n\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract FundMe {\n  //custom errors\n\n  // constant, immutable - variable can't be changed. if its assigned at compile time\n\n  using PriceConverter for uint256;\n\n  // can use with constructor - something that is set once\n  address public immutable i_owner;\n\n  // constant = forever the same and not set in constructor\n\n  uint256 public constant MINIMUM_USD = 50 * 1e18;\n\n  // initalize the v3 interface object at the specified adddress - depends on chain\n  AggregatorV3Interface public priceFeed;\n\n  // gets called when contract is deployed\n  constructor(address priceFeedAddress) {\n    i_owner = msg.sender;\n    priceFeed = AggregatorV3Interface(priceFeedAddress);\n  }\n\n  address[] public funders;\n\n  mapping(address => uint256) public addressToAmountFunded;\n\n  function fund() public payable {\n    require(\n      msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n      \"Didn't send enough!\"\n    ); // 1e18 == 1eth\n    funders.push(msg.sender);\n    addressToAmountFunded[msg.sender] = msg.value;\n  }\n\n  // function withdraw\n\n  function withdraw() public onlyOwner {\n    for (\n      uint256 funderIndex = 0;\n      funderIndex < funders.length;\n      funderIndex = funderIndex + 1\n    ) {\n      address funder = funders[funderIndex];\n      addressToAmountFunded[funder] = 0;\n    }\n    // reset the array\n    funders = new address[](0); // replace the entire array with a new zero array\n    (bool callSuccess, ) = payable(msg.sender).call{\n      value: address(this).balance\n    }(\"\");\n    require(callSuccess, \"Call failed\");\n  }\n\n  // _ = doing the rest of the code, means first run the require, then\n  modifier onlyOwner() {\n    if (msg.sender != i_owner) revert NotOwner();\n    _;\n  }\n\n  receive() external payable {\n    fund();\n  }\n\n  fallback() external payable {\n    fund();\n  }\n\n  // what happens if someone send the contract eth without calling fund\n\n  // two special functions in solidity, receive and fallback\n}\n\n// notes\n// revert = terminate and reverts anything from that tx and send remaining gas back,\n// libarries = contracts with no state varialbes or can't send ethers\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n  // library can't have state variables, all functions internal and can't send eth\n  // library is like defining methods on existing classes?\n\n  function getPrice(AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    // need ABI and address of the contract to interact with other contract.\n    // address 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n    // abi get the ABI with an interface\n    // to interact with other contracts you need interface and address\n    (, int256 price, , , ) = priceFeed.latestRoundData();\n    return uint256(price * 1e10);\n  }\n\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    uint256 ethPrice = getPrice(priceFeed);\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n    return ethAmountInUsd;\n  }\n  // now you can use dot operator as a method on whatever you define as using this library\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}